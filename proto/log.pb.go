// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: log.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TimeFilter int32

const (
	TimeFilter_At     TimeFilter = 0
	TimeFilter_Before TimeFilter = 1
	TimeFilter_After  TimeFilter = 2
)

// Enum value maps for TimeFilter.
var (
	TimeFilter_name = map[int32]string{
		0: "At",
		1: "Before",
		2: "After",
	}
	TimeFilter_value = map[string]int32{
		"At":     0,
		"Before": 1,
		"After":  2,
	}
)

func (x TimeFilter) Enum() *TimeFilter {
	p := new(TimeFilter)
	*p = x
	return p
}

func (x TimeFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[0].Descriptor()
}

func (TimeFilter) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[0]
}

func (x TimeFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeFilter.Descriptor instead.
func (TimeFilter) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

type Pattern int32

const (
	Pattern_Single   Pattern = 0
	Pattern_ZeroOne  Pattern = 1
	Pattern_ZeroPlus Pattern = 2
	Pattern_OnePlus  Pattern = 3
)

// Enum value maps for Pattern.
var (
	Pattern_name = map[int32]string{
		0: "Single",
		1: "ZeroOne",
		2: "ZeroPlus",
		3: "OnePlus",
	}
	Pattern_value = map[string]int32{
		"Single":   0,
		"ZeroOne":  1,
		"ZeroPlus": 2,
		"OnePlus":  3,
	}
)

func (x Pattern) Enum() *Pattern {
	p := new(Pattern)
	*p = x
	return p
}

func (x Pattern) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pattern) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[1].Descriptor()
}

func (Pattern) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[1]
}

func (x Pattern) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pattern.Descriptor instead.
func (Pattern) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{1}
}

type ParseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ParseRequest) Reset() {
	*x = ParseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRequest) ProtoMessage() {}

func (x *ParseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRequest.ProtoReflect.Descriptor instead.
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

func (x *ParseRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Version   int64    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Count     int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Variables []string `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty"`
	Rows      []*Row   `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Response) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Response) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Response) GetVariables() []string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Response) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type URI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// full URI
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// variable
	Variable string  `protobuf:"bytes,3,opt,name=variable,proto3" json:"variable,omitempty"`
	Pattern  Pattern `protobuf:"varint,4,opt,name=pattern,proto3,enum=proto.Pattern" json:"pattern,omitempty"`
}

func (x *URI) Reset() {
	*x = URI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URI) ProtoMessage() {}

func (x *URI) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URI.ProtoReflect.Descriptor instead.
func (*URI) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{2}
}

func (x *URI) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *URI) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *URI) GetVariable() string {
	if x != nil {
		return x.Variable
	}
	return ""
}

func (x *URI) GetPattern() Pattern {
	if x != nil {
		return x.Pattern
	}
	return Pattern_Single
}

type Triple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject   *URI   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Predicate []*URI `protobuf:"bytes,2,rep,name=predicate,proto3" json:"predicate,omitempty"` // can have more than 1 predicate for queries
	Object    *URI   `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *Triple) Reset() {
	*x = Triple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Triple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triple) ProtoMessage() {}

func (x *Triple) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triple.ProtoReflect.Descriptor instead.
func (*Triple) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3}
}

func (x *Triple) GetSubject() *URI {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Triple) GetPredicate() []*URI {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *Triple) GetObject() *URI {
	if x != nil {
		return x.Object
	}
	return nil
}

type SelectQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of vars to select, including '*'
	Vars []string `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty"`
	// list of graphs to select, including '*'
	Graphs []string `protobuf:"bytes,2,rep,name=graphs,proto3" json:"graphs,omitempty"`
	// time filter
	Filter    TimeFilter `protobuf:"varint,3,opt,name=filter,proto3,enum=proto.TimeFilter" json:"filter,omitempty"`
	Timestamp int64      `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//where clause
	Where []*Triple `protobuf:"bytes,5,rep,name=where,proto3" json:"where,omitempty"`
}

func (x *SelectQuery) Reset() {
	*x = SelectQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectQuery) ProtoMessage() {}

func (x *SelectQuery) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectQuery.ProtoReflect.Descriptor instead.
func (*SelectQuery) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{4}
}

func (x *SelectQuery) GetVars() []string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *SelectQuery) GetGraphs() []string {
	if x != nil {
		return x.Graphs
	}
	return nil
}

func (x *SelectQuery) GetFilter() TimeFilter {
	if x != nil {
		return x.Filter
	}
	return TimeFilter_At
}

func (x *SelectQuery) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SelectQuery) GetWhere() []*Triple {
	if x != nil {
		return x.Where
	}
	return nil
}

type InsertQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// insert terms
	Insert []*Triple `protobuf:"bytes,1,rep,name=insert,proto3" json:"insert,omitempty"`
	// list of graphs to insert into, including '*'
	Graphs []string `protobuf:"bytes,2,rep,name=graphs,proto3" json:"graphs,omitempty"`
	//where clause
	Where []*Triple `protobuf:"bytes,3,rep,name=where,proto3" json:"where,omitempty"`
	// whether or not to wait for flush to disk
	Blocking bool `protobuf:"varint,4,opt,name=blocking,proto3" json:"blocking,omitempty"`
}

func (x *InsertQuery) Reset() {
	*x = InsertQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertQuery) ProtoMessage() {}

func (x *InsertQuery) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertQuery.ProtoReflect.Descriptor instead.
func (*InsertQuery) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{5}
}

func (x *InsertQuery) GetInsert() []*Triple {
	if x != nil {
		return x.Insert
	}
	return nil
}

func (x *InsertQuery) GetGraphs() []string {
	if x != nil {
		return x.Graphs
	}
	return nil
}

func (x *InsertQuery) GetWhere() []*Triple {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *InsertQuery) GetBlocking() bool {
	if x != nil {
		return x.Blocking
	}
	return false
}

type VersionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    TimeFilter `protobuf:"varint,1,opt,name=filter,proto3,enum=proto.TimeFilter" json:"filter,omitempty"`
	Timestamp int64      `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Graphs    []string   `protobuf:"bytes,2,rep,name=graphs,proto3" json:"graphs,omitempty"`
	Limit     int64      `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *VersionQuery) Reset() {
	*x = VersionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionQuery) ProtoMessage() {}

func (x *VersionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionQuery.ProtoReflect.Descriptor instead.
func (*VersionQuery) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{6}
}

func (x *VersionQuery) GetFilter() TimeFilter {
	if x != nil {
		return x.Filter
	}
	return TimeFilter_At
}

func (x *VersionQuery) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *VersionQuery) GetGraphs() []string {
	if x != nil {
		return x.Graphs
	}
	return nil
}

func (x *VersionQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityKey []byte `protobuf:"bytes,1,opt,name=EntityKey,proto3" json:"EntityKey,omitempty"`
	// handles 1-hop and + and *
	In        []*Entity_Edge      `protobuf:"bytes,2,rep,name=in,proto3" json:"in,omitempty"`
	Out       []*Entity_Edge      `protobuf:"bytes,3,rep,name=out,proto3" json:"out,omitempty"`
	Endpoints []*Entity_Endpoints `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{7}
}

func (x *Entity) GetEntityKey() []byte {
	if x != nil {
		return x.EntityKey
	}
	return nil
}

func (x *Entity) GetIn() []*Entity_Edge {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Entity) GetOut() []*Entity_Edge {
	if x != nil {
		return x.Out
	}
	return nil
}

func (x *Entity) GetEndpoints() []*Entity_Endpoints {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*URI `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{8}
}

func (x *Row) GetValues() []*URI {
	if x != nil {
		return x.Values
	}
	return nil
}

// p2p messages for experiment
type P2PHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	From []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *P2PHeader) Reset() {
	*x = P2PHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PHeader) ProtoMessage() {}

func (x *P2PHeader) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PHeader.ProtoReflect.Descriptor instead.
func (*P2PHeader) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{9}
}

func (x *P2PHeader) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *P2PHeader) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

type TupleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *P2PHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// query string
	Definition *SelectQuery `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *TupleRequest) Reset() {
	*x = TupleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleRequest) ProtoMessage() {}

func (x *TupleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleRequest.ProtoReflect.Descriptor instead.
func (*TupleRequest) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{10}
}

func (x *TupleRequest) GetHeader() *P2PHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TupleRequest) GetDefinition() *SelectQuery {
	if x != nil {
		return x.Definition
	}
	return nil
}

type TupleUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *P2PHeader   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Rows       []*Row       `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	Vars       []string     `protobuf:"bytes,3,rep,name=vars,proto3" json:"vars,omitempty"`
	Definition *SelectQuery `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *TupleUpdate) Reset() {
	*x = TupleUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleUpdate) ProtoMessage() {}

func (x *TupleUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleUpdate.ProtoReflect.Descriptor instead.
func (*TupleUpdate) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{11}
}

func (x *TupleUpdate) GetHeader() *P2PHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TupleUpdate) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *TupleUpdate) GetVars() []string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *TupleUpdate) GetDefinition() *SelectQuery {
	if x != nil {
		return x.Definition
	}
	return nil
}

// for nodes
type Entity_Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate []byte  `protobuf:"bytes,1,opt,name=Predicate,proto3" json:"Predicate,omitempty"`
	Value     []byte  `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Pattern   Pattern `protobuf:"varint,3,opt,name=Pattern,proto3,enum=proto.Pattern" json:"Pattern,omitempty"`
}

func (x *Entity_Edge) Reset() {
	*x = Entity_Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity_Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity_Edge) ProtoMessage() {}

func (x *Entity_Edge) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity_Edge.ProtoReflect.Descriptor instead.
func (*Entity_Edge) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Entity_Edge) GetPredicate() []byte {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *Entity_Edge) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Entity_Edge) GetPattern() Pattern {
	if x != nil {
		return x.Pattern
	}
	return Pattern_Single
}

// for edges
type Entity_Endpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src []byte `protobuf:"bytes,1,opt,name=Src,proto3" json:"Src,omitempty"`
	Dst []byte `protobuf:"bytes,2,opt,name=Dst,proto3" json:"Dst,omitempty"`
}

func (x *Entity_Endpoints) Reset() {
	*x = Entity_Endpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity_Endpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity_Endpoints) ProtoMessage() {}

func (x *Entity_Endpoints) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity_Endpoints.ProtoReflect.Descriptor instead.
func (*Entity_Endpoints) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Entity_Endpoints) GetSrc() []byte {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Entity_Endpoints) GetDst() []byte {
	if x != nil {
		return x.Dst
	}
	return nil
}

var File_log_proto protoreflect.FileDescriptor

var file_log_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x24, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x7f, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x7c, 0x0a, 0x06, 0x54, 0x72, 0x69, 0x70,
	0x6c, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x52, 0x49, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x52, 0x49, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x52, 0x49, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x05, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x25, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x52,
	0x06, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12,
	0x23, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x22, 0x85, 0x01, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xbe, 0x02, 0x0a, 0x06, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x1a, 0x64, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x1a, 0x2f, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x53, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x44, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x03, 0x52, 0x6f, 0x77,
	0x12, 0x22, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x52, 0x49, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x09, 0x50, 0x32, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x6c, 0x0a, 0x0c, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x32, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x0b, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x32, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x2b, 0x0a, 0x0a, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x74, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x5a, 0x65, 0x72, 0x6f, 0x4f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x5a, 0x65,
	0x72, 0x6f, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x6e, 0x65, 0x50,
	0x6c, 0x75, 0x73, 0x10, 0x03, 0x32, 0x81, 0x02, 0x0a, 0x05, 0x48, 0x6f, 0x64, 0x44, 0x42, 0x12,
	0x4a, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x64, 0x64,
	0x62, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x4c, 0x0a, 0x05, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x1a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x64, 0x64, 0x62,
	0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x2c, 0x0a, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x3b, 0x0a, 0x03, 0x50, 0x32, 0x50,
	0x12, 0x34, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_log_proto_rawDescOnce sync.Once
	file_log_proto_rawDescData = file_log_proto_rawDesc
)

func file_log_proto_rawDescGZIP() []byte {
	file_log_proto_rawDescOnce.Do(func() {
		file_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_log_proto_rawDescData)
	})
	return file_log_proto_rawDescData
}

var file_log_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_log_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_log_proto_goTypes = []interface{}{
	(TimeFilter)(0),          // 0: proto.TimeFilter
	(Pattern)(0),             // 1: proto.Pattern
	(*ParseRequest)(nil),     // 2: proto.ParseRequest
	(*Response)(nil),         // 3: proto.Response
	(*URI)(nil),              // 4: proto.URI
	(*Triple)(nil),           // 5: proto.Triple
	(*SelectQuery)(nil),      // 6: proto.SelectQuery
	(*InsertQuery)(nil),      // 7: proto.InsertQuery
	(*VersionQuery)(nil),     // 8: proto.VersionQuery
	(*Entity)(nil),           // 9: proto.Entity
	(*Row)(nil),              // 10: proto.Row
	(*P2PHeader)(nil),        // 11: proto.P2PHeader
	(*TupleRequest)(nil),     // 12: proto.TupleRequest
	(*TupleUpdate)(nil),      // 13: proto.TupleUpdate
	(*Entity_Edge)(nil),      // 14: proto.Entity.Edge
	(*Entity_Endpoints)(nil), // 15: proto.Entity.Endpoints
}
var file_log_proto_depIdxs = []int32{
	10, // 0: proto.Response.rows:type_name -> proto.Row
	1,  // 1: proto.URI.pattern:type_name -> proto.Pattern
	4,  // 2: proto.Triple.subject:type_name -> proto.URI
	4,  // 3: proto.Triple.predicate:type_name -> proto.URI
	4,  // 4: proto.Triple.object:type_name -> proto.URI
	0,  // 5: proto.SelectQuery.filter:type_name -> proto.TimeFilter
	5,  // 6: proto.SelectQuery.where:type_name -> proto.Triple
	5,  // 7: proto.InsertQuery.insert:type_name -> proto.Triple
	5,  // 8: proto.InsertQuery.where:type_name -> proto.Triple
	0,  // 9: proto.VersionQuery.filter:type_name -> proto.TimeFilter
	14, // 10: proto.Entity.in:type_name -> proto.Entity.Edge
	14, // 11: proto.Entity.out:type_name -> proto.Entity.Edge
	15, // 12: proto.Entity.endpoints:type_name -> proto.Entity.Endpoints
	4,  // 13: proto.Row.values:type_name -> proto.URI
	11, // 14: proto.TupleRequest.header:type_name -> proto.P2PHeader
	6,  // 15: proto.TupleRequest.definition:type_name -> proto.SelectQuery
	11, // 16: proto.TupleUpdate.header:type_name -> proto.P2PHeader
	10, // 17: proto.TupleUpdate.rows:type_name -> proto.Row
	6,  // 18: proto.TupleUpdate.definition:type_name -> proto.SelectQuery
	1,  // 19: proto.Entity.Edge.Pattern:type_name -> proto.Pattern
	6,  // 20: proto.HodDB.Select:input_type -> proto.SelectQuery
	2,  // 21: proto.HodDB.Parse:input_type -> proto.ParseRequest
	6,  // 22: proto.HodDB.Count:input_type -> proto.SelectQuery
	8,  // 23: proto.HodDB.Versions:input_type -> proto.VersionQuery
	12, // 24: proto.P2P.Request:input_type -> proto.TupleRequest
	3,  // 25: proto.HodDB.Select:output_type -> proto.Response
	6,  // 26: proto.HodDB.Parse:output_type -> proto.SelectQuery
	3,  // 27: proto.HodDB.Count:output_type -> proto.Response
	3,  // 28: proto.HodDB.Versions:output_type -> proto.Response
	13, // 29: proto.P2P.Request:output_type -> proto.TupleUpdate
	25, // [25:30] is the sub-list for method output_type
	20, // [20:25] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_log_proto_init() }
func file_log_proto_init() {
	if File_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Triple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity_Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity_Endpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_log_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_log_proto_goTypes,
		DependencyIndexes: file_log_proto_depIdxs,
		EnumInfos:         file_log_proto_enumTypes,
		MessageInfos:      file_log_proto_msgTypes,
	}.Build()
	File_log_proto = out.File
	file_log_proto_rawDesc = nil
	file_log_proto_goTypes = nil
	file_log_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HodDBClient is the client API for HodDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HodDBClient interface {
	Select(ctx context.Context, in *SelectQuery, opts ...grpc.CallOption) (*Response, error)
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*SelectQuery, error)
	Count(ctx context.Context, in *SelectQuery, opts ...grpc.CallOption) (*Response, error)
	Versions(ctx context.Context, in *VersionQuery, opts ...grpc.CallOption) (*Response, error)
}

type hodDBClient struct {
	cc grpc.ClientConnInterface
}

func NewHodDBClient(cc grpc.ClientConnInterface) HodDBClient {
	return &hodDBClient{cc}
}

func (c *hodDBClient) Select(ctx context.Context, in *SelectQuery, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.HodDB/Select", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hodDBClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*SelectQuery, error) {
	out := new(SelectQuery)
	err := c.cc.Invoke(ctx, "/proto.HodDB/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hodDBClient) Count(ctx context.Context, in *SelectQuery, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.HodDB/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hodDBClient) Versions(ctx context.Context, in *VersionQuery, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.HodDB/Versions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HodDBServer is the server API for HodDB service.
type HodDBServer interface {
	Select(context.Context, *SelectQuery) (*Response, error)
	Parse(context.Context, *ParseRequest) (*SelectQuery, error)
	Count(context.Context, *SelectQuery) (*Response, error)
	Versions(context.Context, *VersionQuery) (*Response, error)
}

// UnimplementedHodDBServer can be embedded to have forward compatible implementations.
type UnimplementedHodDBServer struct {
}

func (*UnimplementedHodDBServer) Select(context.Context, *SelectQuery) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (*UnimplementedHodDBServer) Parse(context.Context, *ParseRequest) (*SelectQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (*UnimplementedHodDBServer) Count(context.Context, *SelectQuery) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedHodDBServer) Versions(context.Context, *VersionQuery) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Versions not implemented")
}

func RegisterHodDBServer(s *grpc.Server, srv HodDBServer) {
	s.RegisterService(&_HodDB_serviceDesc, srv)
}

func _HodDB_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HodDBServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HodDB/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HodDBServer).Select(ctx, req.(*SelectQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _HodDB_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HodDBServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HodDB/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HodDBServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HodDB_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HodDBServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HodDB/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HodDBServer).Count(ctx, req.(*SelectQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _HodDB_Versions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HodDBServer).Versions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HodDB/Versions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HodDBServer).Versions(ctx, req.(*VersionQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _HodDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HodDB",
	HandlerType: (*HodDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Select",
			Handler:    _HodDB_Select_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _HodDB_Parse_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _HodDB_Count_Handler,
		},
		{
			MethodName: "Versions",
			Handler:    _HodDB_Versions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}

// P2PClient is the client API for P2P service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PClient interface {
	Request(ctx context.Context, in *TupleRequest, opts ...grpc.CallOption) (P2P_RequestClient, error)
}

type p2PClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PClient(cc grpc.ClientConnInterface) P2PClient {
	return &p2PClient{cc}
}

func (c *p2PClient) Request(ctx context.Context, in *TupleRequest, opts ...grpc.CallOption) (P2P_RequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_P2P_serviceDesc.Streams[0], "/proto.P2P/Request", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P2P_RequestClient interface {
	Recv() (*TupleUpdate, error)
	grpc.ClientStream
}

type p2PRequestClient struct {
	grpc.ClientStream
}

func (x *p2PRequestClient) Recv() (*TupleUpdate, error) {
	m := new(TupleUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PServer is the server API for P2P service.
type P2PServer interface {
	Request(*TupleRequest, P2P_RequestServer) error
}

// UnimplementedP2PServer can be embedded to have forward compatible implementations.
type UnimplementedP2PServer struct {
}

func (*UnimplementedP2PServer) Request(*TupleRequest, P2P_RequestServer) error {
	return status.Errorf(codes.Unimplemented, "method Request not implemented")
}

func RegisterP2PServer(s *grpc.Server, srv P2PServer) {
	s.RegisterService(&_P2P_serviceDesc, srv)
}

func _P2P_Request_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TupleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P2PServer).Request(m, &p2PRequestServer{stream})
}

type P2P_RequestServer interface {
	Send(*TupleUpdate) error
	grpc.ServerStream
}

type p2PRequestServer struct {
	grpc.ServerStream
}

func (x *p2PRequestServer) Send(m *TupleUpdate) error {
	return x.ServerStream.SendMsg(m)
}

var _P2P_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.P2P",
	HandlerType: (*P2PServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Request",
			Handler:       _P2P_Request_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log.proto",
}
