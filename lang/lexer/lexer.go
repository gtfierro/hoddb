// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/gtfierro/hoddb/lang/token"
)

const (
	NoState    = -1
	NumStates  = 98
	NumSymbols = 111
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '?'
1: ':'
2: '<'
3: '>'
4: ';'
5: 'L'
6: 'I'
7: 'S'
8: 'T'
9: 'N'
10: 'A'
11: 'M'
12: 'E'
13: 'S'
14: 'V'
15: 'E'
16: 'R'
17: 'S'
18: 'I'
19: 'O'
20: 'N'
21: 'S'
22: 'F'
23: 'O'
24: 'R'
25: '*'
26: 'L'
27: 'I'
28: 'M'
29: 'I'
30: 'T'
31: 'S'
32: 'E'
33: 'L'
34: 'E'
35: 'C'
36: 'T'
37: 'I'
38: 'N'
39: 'S'
40: 'E'
41: 'R'
42: 'T'
43: '{'
44: '}'
45: '.'
46: 'C'
47: 'O'
48: 'U'
49: 'N'
50: 'T'
51: 'F'
52: 'R'
53: 'O'
54: 'M'
55: 'T'
56: 'O'
57: 'A'
58: 'T'
59: 'B'
60: 'E'
61: 'F'
62: 'O'
63: 'R'
64: 'E'
65: 'A'
66: 'F'
67: 'T'
68: 'E'
69: 'R'
70: 'W'
71: 'H'
72: 'E'
73: 'R'
74: 'E'
75: '|'
76: '/'
77: 'a'
78: '('
79: ')'
80: '?'
81: '+'
82: 'U'
83: 'N'
84: 'I'
85: 'O'
86: 'N'
87: '"'
88: '_'
89: '-'
90: '_'
91: '\'
92: '-'
93: '#'
94: '%'
95: '$'
96: '@'
97: '_'
98: '-'
99: ' '
100: ':'
101: '"'
102: '"'
103: '\t'
104: '\n'
105: '\r'
106: ' '
107: 'A'-'Z'
108: 'a'-'z'
109: '0'-'9'
110: .
*/
